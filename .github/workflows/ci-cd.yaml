name: CI/CD

on:
  push:
    branches: [dev, test, main]
    tags: ['*']
  pull_request:
    branches: [dev, test, main]

env:
  REGISTRY: "ghcr.io"
  TF_SRC_PATH: "terraform/aws"

jobs:
  push_to_registry:
    name: Build, Test and Push to GHCR
    runs-on: ubuntu-20.04
    steps:

      - name: Check out the repo
        uses: actions/checkout@v2
      
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ env.REGISTRY }}/${{ github.repository }}
          BRANCH=${GITHUB_REF#refs/heads/}
          VERSION=${BRANCH}-${GITHUB_RUN_ID}
          TF_WORKSPACE=$([ "$BRANCH" = "main" ] && echo prod || echo ${BRANCH})
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TF_WORKSPACE=prod
          fi
          TAG="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=tf_workspace::${TF_WORKSPACE}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Test
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: .
          file: ./Dockerfile
          target: test
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: .
          file: ./Dockerfile
          target: runtime
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tag }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check ${{ env.TF_SRC_PATH }}

      - name: Terraform Init
        id: init
        run: |
          export TF_WORKSPACE=${{ steps.prep.outputs.tf_workspace }}
          terraform init ${{ env.TF_SRC_PATH }}

      - name: Terraform Validate
        id: validate
        run: terraform validate ${{ env.TF_SRC_PATH }}

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        run: |
          echo "account_name = \"${{ steps.prep.outputs.tf_workspace }}\"" > ${{ env.TF_SRC_PATH }}/gh.auto.tfvars
          echo "client_app_image = \"${{ steps.prep.outputs.tag }}\"" >> ${{ env.TF_SRC_PATH }}/gh.auto.tfvars
          export TF_WORKSPACE=${GITHUB_REF#refs/*/}
          terraform plan -no-color ${{ env.TF_SRC_PATH }}
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      # - name: Terraform Apply
      #   id: apply
      #   if: github.event_name != 'pull_request'
      #   run: |
      #     echo "account_name = \"${GITHUB_REF#refs/*/}\"" > ${{ env.TF_SRC_PATH }}/gh.auto.tfvars
      #     echo "client_app_image = \"${{ steps.prep.outputs.tag }}\"" >> ${{ env.TF_SRC_PATH }}/gh.auto.tfvars
      #     export TF_WORKSPACE=${GITHUB_REF#refs/*/}
      #     terraform apply -auto-approve ${{ env.TF_SRC_PATH }}
